#include "sbsms.h"
#include "voice.h"
#include <math.h>
#include "real.h"
#include <stdlib.h>
#include <string.h>
#include "audiobuffer.h"
#include "vstsbsms.h"
#include <pthread.h>
#include "sample.h"
#include <assert.h>

#include <algorithm>
using namespace std;

SBSMSVoice :: SBSMSVoice(SBSMSample *sample, int blockSize, float Fs, SampleSynthesizer *sampleSynth) 
{
  
  this->sample = sample;
  this->blockSize = blockSize;
  this->Fs = Fs;
  this->voiceSynth = new VoiceSynthesizer(sampleSynth);
  blockPos = 0;
  currPos = 0.0f;
  currSample = 0;
  samplesToProcess = 0;
  channels = 1;
  rb = NULL;
  outBuf = NULL;
  fbuf = NULL;
  abuf = NULL;
  sbsms = NULL;
  iface = NULL;
  transitionBuf[0] = transitionBuf[1] = NULL;
  bPlaying = false;
  bOpen = false;
  bActive = false;
  bReady = false;
  pthread_mutex_init(&playMutex, NULL);
  pthread_mutex_init(&playCondMutex, NULL);
  pthread_mutex_init(&sbsmsMutex, NULL);
  pthread_cond_init(&playCond,NULL);
  pthread_mutex_init(&inputCondMutex, NULL);
  pthread_cond_init(&inputCond,NULL);
  currPos = 0.0f;
  leftPos = 0.0f;
  rightPos = 1.0f;
  startPos = 0.0f;
  startSample = 
  loop = loopForwardLoop;
  bLoop = false;
  targetVol = 0.8f;
  volume = 0.8f;
  rate = 1.0f;
  pbendPitch = 1.0f;
  nInputSamples = 0;
  nTransition = 0;
  nTransition2 = 0;
  nDoneTransition = 0;
  nDoneTransition2 = 0;
}

SBSMSVoice :: ~SBSMSVoice()
{
  delete voiceSynth;
  close();
}

int SBSMSVoice :: getSampleIndex()
{
  return sample->getIndex();
}

void SBSMSVoice :: wait()
{
  pthread_mutex_lock(&playCondMutex);      
  bReady = true;
  pthread_cond_wait(&playCond,&playCondMutex);
  bReady = false;
  pthread_mutex_unlock(&playCondMutex);
}

void *writeThreadCB(void *data) {
  SBSMSVoice *voice = (SBSMSVoice*)data;
  
  while(voice->isActive()) {
    if(!voice->isPlaying()) {
      voice->wait();
    }

    while(voice->isPlaying()) {
      voice->write();
    }
  
    voice->writingComplete();
  }

  pthread_exit(NULL);
  return NULL;
}

void SBSMSVoice :: writingComplete()
{
  blockPos = 0;
  rb->flush();
  rb->writingComplete();  
  pthread_mutex_lock(&sbsmsMutex);
  sbsms->reset(iface,true);
  pthread_mutex_lock(&inputCondMutex);
  nInputSamples = 0;
  pthread_mutex_unlock(&inputCondMutex);
  pthread_mutex_unlock(&sbsmsMutex);
}

bool SBSMSVoice :: isActive()
{
  return bActive;
}

bool SBSMSVoice :: isReady()
{
  return bReady;
}

void SBSMSVoice :: triggerOn(float notePitch, float noteVol)
{
  this->notePitch = notePitch;
  this->noteVol = noteVol;
  if(iface) iface->setPitch(notePitch*pbendPitch*44100.0f/Fs);
  seekStart();
  bAttack = true;
  bRelease = false;
  env = 0.0f;
  play();
}

void SBSMSVoice :: triggerOff()
{
  bAttack = false;
  bRelease = true;
}

void SBSMSVoice :: forceOff()
{
   release = 1.0f;
   triggerOff();
}

void SBSMSVoice :: write()
{
  printf("n1 = %ld\n",nInputSamples);

  pthread_mutex_lock(&inputCondMutex);
  if(nInputSamples <= 0) {
    pthread_cond_wait(&inputCond,&inputCondMutex);
  }
  pthread_mutex_unlock(&inputCondMutex);      

  printf("n2 = %ld\n",nInputSamples);

  pthread_mutex_lock(&sbsmsMutex);
  long nDone;

  if(nTransition) {
    long blockPos1 = blockPos;
    long n = -1;
    printf("transition start %ld %ld %ld\n",nInputSamples,nDoneTransition,nTransition);
    
    while(n && nDoneTransition < nTransition) {
      n = min(nTransition-nDoneTransition,blockSize - blockPos1);

      pthread_mutex_lock(&inputCondMutex);
      n = min(n,nInputSamples);
      pthread_mutex_unlock(&inputCondMutex);

      printf("transition read n %ld\n",n);
      // read what we can of what's left of the transition segment
      // don't advance the internal buffers
      n = sbsms->readInputs(transitionBuf, n, false);

      printf("transition synth 1 n %ld\n",n);
      n = sbsms->synthFromMemory(iface,bufTransition1+nDoneTransition,n,voiceSynth);
      bool bGoingBackwards = (n < 0);
      n = abs(n);

      pthread_mutex_lock(&inputCondMutex);
      nInputSamples -= n;
      pthread_mutex_unlock(&inputCondMutex);

      nDoneTransition += n;
      blockPos1 += n;
      while(blockPos1 >= blockSize) blockPos1 -= blockSize;
      if(n == 0) {
        if(bLoop) {    
          sbsms->reset(iface);
          if(bGoingBackwards) {
            sbsms->seek(iface,rightSample);
          } else {
            sbsms->seek(iface,leftSample);
          }
        }
      }
    }
    // if the transition decay is done, then read all of the input samples 
    // into the transition buffer
    // and write the transition buffer back to internal buffers
    if(nDoneTransition == nTransition) {
      long nrebuf = -1;
      while(nrebuf) {
        pthread_mutex_lock(&inputCondMutex);
        nrebuf = sbsms->readInputs(transitionBuf, blockSize, true);
        nInputSamples -= nrebuf;
        pthread_mutex_unlock(&inputCondMutex);
        printf("rebuf %ld\n",nrebuf,blockSize);
      }
     
      sbsms->reset(iface, true);
      sbsms->seek(iface,nextStartSample);
      
      float *inputs[2];
      long nin = transitionBuf[0]->nReadable();
      for(int c=0; c<channels; c++) {
        inputs[c] = transitionBuf[c]->getReadBuf();
        nin = min(nin,transitionBuf[c]->nReadable());
      }

      printf("transition write n %ld\n",nin);
      sbsms->writeInputs(inputs,nin,0);
      pthread_mutex_lock(&inputCondMutex);
      nInputSamples += nin;
      pthread_mutex_unlock(&inputCondMutex);

      nDoneTransition2 = 0;
      nTransition2 = nTransition;
      nTransition = 0;
    }
  }

  if(nTransition2) {
    long n = -1;
    long blockPos2 = blockPos;
    while(n && nDoneTransition2 < nTransition2) {
      n = min(nTransition2-nDoneTransition2,blockSize - blockPos2);
      pthread_mutex_lock(&inputCondMutex);
      n = min(n,nInputSamples);
      pthread_mutex_unlock(&inputCondMutex);
      printf("transition 2 synth n %ld\n",n);
      n = sbsms->synthFromMemory(iface,bufTransition2+nDoneTransition2,n,voiceSynth);
      bool bGoingBackwards = (n < 0);
      n = abs(n);
      pthread_mutex_lock(&inputCondMutex);
      nInputSamples -= n;
      pthread_mutex_unlock(&inputCondMutex);
      blockPos2 += n;
      nDoneTransition2 += n;
      while(blockPos2 >= blockSize) blockPos2 -= blockSize;
      if(n == 0) {
        if(bLoop) {    
          sbsms->reset(iface);
          if(bGoingBackwards) {
            sbsms->seek(iface,rightSample);
          } else {
            sbsms->seek(iface,leftSample);
          }
        } else {
          rb->writingComplete();
        }
      }
    }
  
    if(nDoneTransition2 == nTransition2) {
      nDone = min(nDoneTransition, nDoneTransition2);
      printf("transitioned %ld %ld\n",nDoneTransition, nDoneTransition2);
      blockPos += nDone;
      while(blockPos >= blockSize) blockPos -= blockSize;
      float dTransition = 1.0f / (float)nDone;
      float transition1 = 1.0f;
      float transition2 = 0.0f;
      for(int i=0; i<nDone; i++) {
        for(int c=0; c<channels; c++) {
          abuf[i][c] = transition1 * bufTransition1[i][c] + transition2 * bufTransition2[i][c];
        }
        transition1 -= dTransition;
        transition2 += dTransition;
      }
      nTransition2 = 0;
      for(int c=0; c<channels; c++) {
        transitionBuf[c]->clear();
      }
      // start a new transition
      nDoneTransition = 0;
      nTransition2 = 0;
      nDoneTransition2 = 0;

      if(nextStartSample != startSample) {
        nTransition = min(blockSize,min(256L,lrintf(Fs*0.004f)));
        startSample = nextStartSample;
      }
    }
  } else {
    long n = blockSize - blockPos;
    pthread_mutex_lock(&inputCondMutex);
    n = min(n,nInputSamples);
    pthread_mutex_unlock(&inputCondMutex);
    n = sbsms->synthFromMemory(iface,abuf,n,voiceSynth);
    if(n) bGoingBackwards = (n < 0);
    nDone = abs(n);
    pthread_mutex_lock(&inputCondMutex);
    nInputSamples -= nDone;
    pthread_mutex_unlock(&inputCondMutex);
    blockPos += nDone;
    if(blockPos >= blockSize) blockPos -= blockSize;
    if(nDone == 0) {
      if(bLoop) {    
        sbsms->reset(iface);
        if(bGoingBackwards) {
          sbsms->seek(iface,rightSample);
        } else {
          sbsms->seek(iface,leftSample);
        }
      } else if(bStill) {
        nDone = blockSize - blockPos;
        memset(abuf,0,nDone*sizeof(audio));
      } else {
        rb->writingComplete();
      }
    }
  }
  currSample = sbsms->getSamplePosFromMemory();
  float rate = this->rate * 44100.0f / Fs;
  if(rate != 0.0f) {
    currSample -= (int)((float)rb->getSamplesQueued() * rate);
    currSample = max(leftSample,min(rightSample,currSample));
  }
  currPos = (float)currSample / (float)samplesToProcess;
  pthread_mutex_unlock(&sbsmsMutex);
  if(nDone) {
    audio_convert_from(fbuf,0,abuf,0,nDone,channels);
    rb->write(fbuf,nDone);
  }
}

void SBSMSVoice :: process(float **inputs, float *out, int samples, int offset)
{ 
  int ret = isPlaying()?1:0;
  int chunk = samples;
  int pos = 0;

  printf("writeIn1 %d\n",samples);
  pthread_mutex_lock(&sbsmsMutex);
  if(sbsms) sbsms->writeInputs(inputs, samples, offset);
  pthread_mutex_unlock(&sbsmsMutex);
  printf("writeIn2 %d\n",samples);

  printf("nIn1 %ld\n",nInputSamples);
  pthread_mutex_lock(&inputCondMutex);
  nInputSamples += samples;
  pthread_mutex_unlock(&inputCondMutex);
  printf("nIn2 %ld\n",nInputSamples);

  pthread_cond_broadcast(&inputCond);

  bool bStop = false;  
  while(pos<samples && ret) {
    chunk = samples-pos;
    ret = rb->read(outBuf+pos*channels,chunk);
    pos += ret;
    if(!ret) bStop = true;
  }
  for(int k=0;k<pos;k++) {
    float f = env*volume*noteVol;
    int k2 = k<<1;
    if(channels == 2) {
      out[k2] += f*outBuf[k2];
      out[k2+1] += f*outBuf[k2+1];
    } else {
      out[k2] += f*outBuf[k];
      out[k2+1] += f*outBuf[k];
    }
    if(volume < targetVol) {
      volume += dvol;
      if(volume > targetVol) volume = targetVol;
    } else if(volume > targetVol) {
      volume -= dvol;
      if(volume < targetVol) volume = targetVol;
    }
    if(bAttack) {
      env += dattack;
      if(env > 1.0f) {
        bAttack = false;
        env = 1.0f;
      }
    } else if(bRelease) {
      env -= drelease;
      if(env < 0.0f)  {
         bStop = true;
         env = 0.0f;
      }
    }
  }
  if(bStop) {   
    stop();
  }
}

bool SBSMSVoice :: play()
{
  if(!bOpen) return false;
  bPlaying = true;
  nTransition = 0;
  pthread_cond_broadcast(&playCond);  
  return true;
}

bool SBSMSVoice :: stop()
{
  bPlaying = false;
  if(bOpen) {
    rb->readingComplete();
  }
  return true;
}

void SBSMSVoice :: close()
{
  if(bActive) {
    bActive = false;
    stop();
    pthread_cond_broadcast(&playCond);
    pthread_join(writeThread, NULL);
  }

  if(rb) { delete rb; rb = NULL; }
  if(outBuf) { free(outBuf); outBuf = NULL; }
  if(abuf) { free(abuf); abuf = NULL; }
  if(fbuf) { free(fbuf); fbuf = NULL; }
  pthread_mutex_lock(&sbsmsMutex);
  if(sbsms) { delete sbsms; sbsms = NULL; }
  if(iface) { delete iface; iface = NULL; }
  for(int c = 0; c<channels; c++) {
    if(transitionBuf[c]) { delete transitionBuf[c]; transitionBuf[c] = NULL; }
  }
  pthread_mutex_unlock(&sbsmsMutex);

  bOpen = false;
  bPlaying = false;
  bActive = false;
}

bool SBSMSVoice :: open(SBSMS *sbsmsSrc, countType samplesToProcess)
{
  pthread_mutex_lock(&sbsmsMutex);
  sbsms = new SBSMS(sbsmsSrc);
  this->samplesToProcess = samplesToProcess;
  iface = new SBSMSInterfaceVariableRate(samplesToProcess);
  pthread_mutex_unlock(&sbsmsMutex);
  iface->setRate(rate);
  channels = sbsms->getChannels();
  bOpen = true;
  setLeftPos(leftPos);
  setRightPos(rightPos);
  setStartPos(startPos);
  setLoop(loop);
  setBlockSize(blockSize);
  setSampleRate(Fs);
  currPos = 0.0f;
  currSample = 0;
  nTransition = 0;
  for(int c=0; c<channels; c++) {
    if(transitionBuf[c]) { delete transitionBuf[c]; }
    transitionBuf[c] = new ArrayRingBuffer<float>(512);
  }
  bActive = true;
  int rc = pthread_create(&writeThread, NULL, writeThreadCB, (void*)this);
  if(rc) abort();

  return true;
}

bool SBSMSVoice :: isPlaying()
{  
  return bPlaying;
}

void SBSMSVoice :: setLeftPos(float pos)
{
  pthread_mutex_lock(&sbsmsMutex);
  leftPos = pos;
  leftSample = (countType)(pos*samplesToProcess);
  if(sbsms) sbsms->setLeftPos(leftSample);
  pthread_mutex_unlock(&sbsmsMutex);
}

void SBSMSVoice :: setRightPos(float pos)
{
  pthread_mutex_lock(&sbsmsMutex);
  rightPos = pos;
  rightSample = (countType)(pos*samplesToProcess);
  if(sbsms) sbsms->setRightPos(rightSample);
  pthread_mutex_unlock(&sbsmsMutex);
}

countType SBSMSVoice :: getCurrSample()
{
  return currSample;
}

float SBSMSVoice :: getCurrPos()
{
  return currPos;
}

void SBSMSVoice :: setStartSample(countType samplePos)
{
  nextStartSample = samplePos;
  startSample = samplePos;
}

void SBSMSVoice :: setStartPos(float pos)
{
  pthread_mutex_lock(&sbsmsMutex);
  nextStartSample = (countType)(pos*samplesToProcess);
  if(sbsms) {
    if(isPlaying()) {
      if(!nTransition2) {
        startSample = nextStartSample;
        if(!nTransition) {
          nTransition = min(blockSize,min(256L,lrintf(Fs*0.004f)));
        }
      }
    } else {
      startSample = nextStartSample;
      sbsms->reset(iface);
      sbsms->seek(iface,startSample);
    }
  } else {
    startSample = nextStartSample;
  }

  pthread_mutex_unlock(&sbsmsMutex);
}

void SBSMSVoice :: setLoop(int loop)
{
  this->loop = loop;
  bLoop = (loop == loopForwardLoop || loop == loopBackwardLoop || loop == loopStillLoop);
  bBackwards = (loop == loopBackward || loop == loopBackwardLoop);
  if(bBackwards && startSample == 0) {
    startSample = rightSample;
  } else if(!bBackwards && startSample == rightSample) {
    startSample = leftSample;
  }
  bStill = (loop == loopStill || loop == loopStillLoop);
}

void SBSMSVoice :: seekStart()
{
  pthread_mutex_lock(&sbsmsMutex);
  if(sbsms) {
    sbsms->reset(iface);
    sbsms->seek(iface,startSample);
  }
  pthread_mutex_unlock(&sbsmsMutex);
}

void SBSMSVoice :: setBlockSize(int value)
{
  this->blockSize = value;
  this->blockPos = 0;
  if(rb) delete rb; 
  rb = new AudioBuffer(blockSize*6,channels);
  if(outBuf) free(outBuf);
  outBuf = (float*)calloc(blockSize*channels,sizeof(float)); 
  if(fbuf) free(fbuf);
  fbuf = (float*)calloc(blockSize*channels,sizeof(float));
  if(abuf) free(abuf);
  abuf = (audio*)calloc(blockSize,sizeof(audio));
}

void SBSMSVoice :: setSampleRate(float value)
{
  this->Fs = value;
  if(iface) iface->setRate(rate*44100.0f/Fs);
  if(iface) iface->setPitch(notePitch*pbendPitch*44100.0f/Fs);
  dattack = 1.0f / (attack * Fs);
  drelease = 1.0f / (release * Fs);
  dvol = 1.0f / (0.004f * Fs);
}

void SBSMSVoice :: setPitchbend(float pbendPitch)
{
  this->pbendPitch = pbendPitch;
  if(iface) iface->setPitch(notePitch*pbendPitch*44100.0f/Fs);
}

void SBSMSVoice :: setAttack(float attack)
{
	this->attack = attack;
  dattack = 1.0f / (attack * Fs);
}

void SBSMSVoice :: setRelease(float release)
{
	this->release = release;
  drelease = 1.0f / (release * Fs);
}

void SBSMSVoice :: setVolume(float vol)
{
  this->targetVol = vol;
  if(!isPlaying()) this->volume = vol;
}
  
void SBSMSVoice :: setRate(float rate)
{
  this->rate = rate;
  if(iface) iface->setRate(rate*44100.0f/Fs);
}
